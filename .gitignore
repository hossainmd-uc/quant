# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to use this template.
# .idea/

# IDE and Editor files
.idea/
.vscode/
*.swp
*.swo
*~
.DS_Store
Thumbs.db

# OS generated files
*.orig
.nfs*

# Data files - typically large and shouldn't be in version control
*.csv
*.h5
*.hdf5
*.pickle
*.pkl
*.parquet
*.feather
*.json.gz
*.zip
*.tar.gz
*.rar
*.7z

# Financial data directories
data/
datasets/
market_data/
historical_data/
tick_data/
options_data/
futures_data/

# Model files - usually large
*.joblib
*.model
*.h5
*.pb
*.onnx
*.pt
*.pth
*.bin
models/checkpoints/
models/saved_models/
models/weights/

# Logs and output files
*.log
*.out
*.err
logs/
outputs/
results/
reports/
plots/
figures/

# Trading specific files
*.db
*.sqlite
trade_history.csv
positions.csv
portfolio.csv
backtest_results/
strategy_performance/
risk_reports/

# Configuration files with sensitive data
config/secrets.yaml
config/api_keys.yaml
config/credentials.yaml
.env.local
.env.production
.env.development

# Temporary files
temp/
tmp/
*.tmp
*.temp
*.bak
*.backup

# Jupyter notebook outputs (but keep the notebooks themselves)
*.ipynb
!docs/*.ipynb
!examples/*.ipynb
!tutorials/*.ipynb

# Documentation build files
docs/build/
docs/_build/
docs/html/
docs/latex/

# Financial libraries cache
.yfinance_cache/
.alpha_vantage_cache/
.quandl_cache/

# Monitoring and profiling
*.prof
*.profile
.profile_data/

# Testing artifacts
.pytest_cache/
test_results/
coverage_html/
htmlcov/

# Build artifacts
build/
dist/
*.egg-info/

# Package manager files
node_modules/
package-lock.json
yarn.lock

# MacOS
.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini

# Linux
.directory
.trash-*

# Python virtual environments (additional patterns)
pyvenv.cfg
Scripts/
pyvenv/
.Python
python/

# Specific to this project - extracted knowledge files that might be large
extracted_knowledge/knowledge.json
extracted_knowledge/knowledge.pkl
extracted_knowledge/large_datasets/

# Backup files
*.bak
*.backup
*.old
*~

# Editor swap files
.*.swp
.*.swo
*.swn

# Local development files
local_settings.py
dev_settings.py
debug_settings.py 